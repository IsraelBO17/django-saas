# Generated by Django 5.1.1 on 2024-09-18 08:11

import django.utils.timezone
import uuid
from django.db import migrations, models

from django.contrib.auth.models import Group, Permission

def create_groups_and_permissions(apps, schema_editor):
    Group.objects.create(name='superadmin')
    Group.objects.create(name='user')

    superadmin_group = Group.objects.get(name='superadmin')
    user_group = Group.objects.get(name='user')  # noqa: F841

    # Assign all permissions to the superadmin group
    all_permissions = Permission.objects.all()
    superadmin_group.permissions.set(all_permissions)

    # Optionally, assign specific permissions to the user group (if needed)
    # user_group.permissions.set(specific_permissions)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user is verified as an employee.', verbose_name='verified')),
                ('is_active', models.BooleanField(default=False, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.RunPython(create_groups_and_permissions),
    ]
